// <auto-generated />
using System;
using MedicalSystem.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalSystem.DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230615172148_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalSystem.CoreLayer.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2023, 6, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            Cost = 100,
                            DoctorId = 1,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2023, 6, 16, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            Cost = 75,
                            DoctorId = 2,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2023, 6, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            Cost = 120,
                            DoctorId = 3,
                            PatientId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2023, 6, 18, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 4,
                            Cost = 90,
                            DoctorId = 4,
                            PatientId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2023, 6, 19, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 5,
                            Cost = 80,
                            DoctorId = 5,
                            PatientId = 1
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchAddressId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("BranchAddressId")
                        .IsUnique();

                    b.HasIndex("HospitalId");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchAddressId = 1,
                            HospitalId = 1,
                            Name = "Branch A",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            BranchAddressId = 2,
                            HospitalId = 2,
                            Name = "Branch B",
                            PhoneNumber = "9876543210"
                        },
                        new
                        {
                            Id = 3,
                            BranchAddressId = 3,
                            HospitalId = 3,
                            Name = "Branch C",
                            PhoneNumber = "5555555555"
                        },
                        new
                        {
                            Id = 4,
                            BranchAddressId = 4,
                            HospitalId = 4,
                            Name = "Branch D",
                            PhoneNumber = "1112223333"
                        },
                        new
                        {
                            Id = 5,
                            BranchAddressId = 5,
                            HospitalId = 1,
                            Name = "Branch E",
                            PhoneNumber = "5646546546"
                        },
                        new
                        {
                            Id = 6,
                            BranchAddressId = 6,
                            HospitalId = 2,
                            Name = "Branch F",
                            PhoneNumber = "1555154654"
                        },
                        new
                        {
                            Id = 7,
                            BranchAddressId = 7,
                            HospitalId = 3,
                            Name = "Branch J",
                            PhoneNumber = "7797988521"
                        },
                        new
                        {
                            Id = 8,
                            BranchAddressId = 8,
                            HospitalId = 4,
                            Name = "Branch H",
                            PhoneNumber = "6597451215"
                        },
                        new
                        {
                            Id = 9,
                            BranchAddressId = 9,
                            HospitalId = 1,
                            Name = "Branch I",
                            PhoneNumber = "1564989848"
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.BranchAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("BranchAddress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            Country = "USA",
                            PostalCode = "12345",
                            State = "NY",
                            Street = "Main Street"
                        },
                        new
                        {
                            Id = 2,
                            City = "Los Angeles",
                            Country = "USA",
                            PostalCode = "54321",
                            State = "CA",
                            Street = "First Avenue"
                        },
                        new
                        {
                            Id = 3,
                            City = "London",
                            Country = "UK",
                            PostalCode = "98765",
                            State = "GB",
                            Street = "King's Road"
                        },
                        new
                        {
                            Id = 4,
                            City = "Paris",
                            Country = "France",
                            PostalCode = "45678",
                            State = "FA",
                            Street = "Champs-Élysées"
                        },
                        new
                        {
                            Id = 5,
                            City = "Florida",
                            Country = "USA",
                            PostalCode = "55465",
                            State = "FL",
                            Street = "Grand-Avenue"
                        },
                        new
                        {
                            Id = 6,
                            City = "Alexandria",
                            Country = "Egypt",
                            PostalCode = "64568",
                            State = "AX",
                            Street = "Lo Mark"
                        },
                        new
                        {
                            Id = 7,
                            City = "Menoufiya",
                            Country = "Egypt",
                            PostalCode = "45418",
                            State = "MF",
                            Street = "Banzena"
                        },
                        new
                        {
                            Id = 8,
                            City = "Menya Qmh",
                            Country = "Zambia",
                            PostalCode = "99865",
                            State = "MQ",
                            Street = "Fo Sahab"
                        },
                        new
                        {
                            Id = 9,
                            City = "Qom Hamada",
                            Country = "Brazil",
                            PostalCode = "11548",
                            State = "QH",
                            Street = "Ras Bar"
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.BranchDoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StaringDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchDoctor");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            BranchId = 1,
                            StaringDate = new DateTime(2021, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 2,
                            BranchId = 1,
                            StaringDate = new DateTime(2021, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 3,
                            BranchId = 1,
                            StaringDate = new DateTime(2021, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 4,
                            BranchId = 1,
                            StaringDate = new DateTime(2021, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 2,
                            BranchId = 2,
                            StaringDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 1,
                            BranchId = 2,
                            StaringDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 3,
                            BranchId = 2,
                            StaringDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 4,
                            BranchId = 2,
                            StaringDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 5,
                            BranchId = 2,
                            StaringDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 3,
                            BranchId = 3,
                            StaringDate = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 4,
                            BranchId = 4,
                            StaringDate = new DateTime(2022, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 5,
                            BranchId = 5,
                            StaringDate = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("Specilization")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Clinic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Family Medicine Clinic",
                            RoomNumber = 1001,
                            Specilization = "Family Medicine"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Dental Clinic",
                            RoomNumber = 1002,
                            Specilization = "Dentistry"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Internal Medicine Clinic",
                            RoomNumber = 1003,
                            Specilization = "Internal Medicine"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Orthopedic Clinic",
                            RoomNumber = 1004,
                            Specilization = "Orthopedics"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Cardiology Clinic",
                            RoomNumber = 1005,
                            Specilization = "Cardiology"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Pediatric Clinic",
                            RoomNumber = 1006,
                            Specilization = "Pediatrics"
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            Name = "Orthopedics"
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 1,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 1,
                            Name = "Anesthesiology"
                        },
                        new
                        {
                            Id = 6,
                            BranchId = 1,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 7,
                            BranchId = 1,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 8,
                            BranchId = 1,
                            Name = "Ophthalmology"
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("OfflineCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OnlineCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Dubai",
                            ClinicId = 1,
                            Country = "United Arab Emirates",
                            DepartmentId = 1,
                            Email = "ahmed.ali@example.com",
                            Gender = "Male",
                            Name = "Dr. Ahmed Ali",
                            OfflineCost = 200m,
                            OnlineCost = 100m,
                            PhoneNumber = "+971 123-456-7890",
                            Street = "123 Main St"
                        },
                        new
                        {
                            Id = 2,
                            City = "Abu Dhabi",
                            ClinicId = 2,
                            Country = "United Arab Emirates",
                            DepartmentId = 2,
                            Email = "fatima.hassan@example.com",
                            Gender = "Female",
                            Name = "Dr. Fatima Hassan",
                            OfflineCost = 300m,
                            OnlineCost = 200m,
                            PhoneNumber = "+971 987-654-3210",
                            Street = "456 Elm St"
                        },
                        new
                        {
                            Id = 3,
                            City = "Sharjah",
                            ClinicId = 3,
                            Country = "United Arab Emirates",
                            DepartmentId = 3,
                            Email = "ali.mahmoud@example.com",
                            Gender = "Male",
                            Name = "Dr. Ali Mahmoud",
                            OfflineCost = 400m,
                            OnlineCost = 300m,
                            PhoneNumber = "+971 555-123-4567",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = 4,
                            City = "Ajman",
                            ClinicId = 4,
                            Country = "United Arab Emirates",
                            DepartmentId = 4,
                            Email = "aisha.khan@example.com",
                            Gender = "Female",
                            Name = "Dr. Aisha Khan",
                            OfflineCost = 500m,
                            OnlineCost = 400m,
                            PhoneNumber = "+971 555-987-6543",
                            Street = "321 Pine St"
                        },
                        new
                        {
                            Id = 5,
                            City = "Ras Al Khaimah",
                            ClinicId = 5,
                            Country = "United Arab Emirates",
                            DepartmentId = 5,
                            Email = "omar.ahmed@example.com",
                            Gender = "Male",
                            Name = "Dr. Omar Ahmed",
                            OfflineCost = 600m,
                            OnlineCost = 500m,
                            PhoneNumber = "+971 555-567-8901",
                            Street = "987 Maple St"
                        },
                        new
                        {
                            Id = 6,
                            City = "Fujairah",
                            ClinicId = 6,
                            Country = "United Arab Emirates",
                            DepartmentId = 6,
                            Email = "layla.hassan@example.com",
                            Gender = "Female",
                            Name = "Dr. Layla Hassan",
                            OfflineCost = 700m,
                            OnlineCost = 600m,
                            PhoneNumber = "+971 555-210-9876",
                            Street = "654 Walnut St"
                        },
                        new
                        {
                            Id = 7,
                            City = "Umm Al Quwain",
                            ClinicId = 1,
                            Country = "United Arab Emirates",
                            DepartmentId = 7,
                            Email = "ibrahim.khalid@example.com",
                            Gender = "Male",
                            Name = "Dr. Ibrahim Khalid",
                            OfflineCost = 800m,
                            OnlineCost = 700m,
                            PhoneNumber = "+971 555-876-5432",
                            Street = "210 Cedar St"
                        },
                        new
                        {
                            Id = 8,
                            City = "Al Ain",
                            ClinicId = 2,
                            Country = "United Arab Emirates",
                            DepartmentId = 8,
                            Email = "sarah.ahmed@example.com",
                            Gender = "Female",
                            Name = "Dr. Sarah Ahmed",
                            OfflineCost = 900m,
                            OnlineCost = 800m,
                            PhoneNumber = "+971 555-432-1098",
                            Street = "876 Birch St"
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.DoctorQualification", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Certification")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CertificationFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId", "Certification");

                    b.ToTable("DoctorQualification");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Certification = "MBBS",
                            CertificationFrom = "University of Medicine"
                        },
                        new
                        {
                            DoctorId = 2,
                            Certification = "MD",
                            CertificationFrom = "Medical College"
                        },
                        new
                        {
                            DoctorId = 3,
                            Certification = "MS",
                            CertificationFrom = "Surgical Institute"
                        },
                        new
                        {
                            DoctorId = 4,
                            Certification = "DM",
                            CertificationFrom = "Cardiology University"
                        },
                        new
                        {
                            DoctorId = 5,
                            Certification = "MCh",
                            CertificationFrom = "Neurosurgery Institute"
                        },
                        new
                        {
                            DoctorId = 6,
                            Certification = "BDS",
                            CertificationFrom = "Dental School"
                        },
                        new
                        {
                            DoctorId = 7,
                            Certification = "PharmD",
                            CertificationFrom = "Pharmacy College"
                        },
                        new
                        {
                            DoctorId = 8,
                            Certification = "DPT",
                            CertificationFrom = "Physical Therapy Institute"
                        },
                        new
                        {
                            DoctorId = 1,
                            Certification = "MSW",
                            CertificationFrom = "Social Work University"
                        },
                        new
                        {
                            DoctorId = 2,
                            Certification = "PhD",
                            CertificationFrom = "Research Institute"
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Hospital");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "stjude@example.com",
                            Name = "St. Jude Children's Research Hospital"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mountsinai@example.com",
                            Name = "Mount Sinai Hospital"
                        },
                        new
                        {
                            Id = 3,
                            Email = "chop@example.com",
                            Name = "Children's Hospital of Philadelphia"
                        },
                        new
                        {
                            Id = 4,
                            Email = "torontogeneral@example.com",
                            Name = "Toronto General Hospital"
                        },
                        new
                        {
                            Id = 5,
                            Email = "tmc@example.com",
                            Name = "Texas Medical Center"
                        },
                        new
                        {
                            Id = 6,
                            Email = "moffitt@example.com",
                            Name = "Moffitt Cancer Center"
                        },
                        new
                        {
                            Id = 7,
                            Email = "barnesjewish@example.com",
                            Name = "Barnes-Jewish Hospital"
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 25,
                            Email = "john@example.com",
                            Gender = "M",
                            Name = "John Smith",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            Age = 30,
                            Email = "jane@example.com",
                            Gender = "F",
                            Name = "Jane Doe",
                            PhoneNumber = "9876543210"
                        },
                        new
                        {
                            Id = 3,
                            Age = 40,
                            Email = "alex@example.com",
                            Gender = "M",
                            Name = "Alex Johnson",
                            PhoneNumber = "5555555555"
                        },
                        new
                        {
                            Id = 4,
                            Age = 22,
                            Email = "emily@example.com",
                            Gender = "F",
                            Name = "Emily Williams",
                            PhoneNumber = "1112223333"
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Report");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            Date = new DateTime(2023, 6, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patient presented with flu-like symptoms.",
                            Prescription = "Prescribed antiviral medication and rest."
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            Date = new DateTime(2023, 6, 16, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patient complained of joint pain and inflammation.",
                            Prescription = "Prescribed anti-inflammatory medication and physical therapy."
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            Date = new DateTime(2023, 6, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patient underwent routine check-up.",
                            Prescription = "No medication prescribed. Advised to maintain a healthy lifestyle."
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            Date = new DateTime(2023, 6, 18, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patient presented with symptoms of food poisoning.",
                            Prescription = "Prescribed antibiotics and advised to stay hydrated."
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            Date = new DateTime(2023, 6, 19, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patient complained of persistent headaches.",
                            Prescription = "Prescribed pain relievers and recommended further evaluation."
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            PatientId = 1,
                            Rate = 90,
                            ReviewText = "Great experience with the doctor. Very knowledgeable and friendly."
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            PatientId = 2,
                            Rate = 95,
                            ReviewText = "Highly recommend this doctor. Excellent bedside manner and thorough examination."
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            PatientId = 3,
                            Rate = 85,
                            ReviewText = "Had a positive experience with the doctor. Listened to my concerns and provided helpful advice."
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 2,
                            PatientId = 4,
                            Rate = 100,
                            ReviewText = "Extremely satisfied with the doctor's expertise. Helped me understand my condition better."
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 1,
                            PatientId = 3,
                            Rate = 80,
                            ReviewText = "The doctor was friendly and professional. Explained the treatment plan clearly."
                        });
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Appointment", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.CoreLayer.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.CoreLayer.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Branch", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.BranchAddress", "BranchAddress")
                        .WithOne("Branch")
                        .HasForeignKey("MedicalSystem.CoreLayer.Branch", "BranchAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.CoreLayer.Hospital", "Hospital")
                        .WithMany("Branches")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchAddress");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.BranchDoctor", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.Branch", "Branch")
                        .WithMany("BranchDoctors")
                        .HasForeignKey("BranchId")
                        .IsRequired();

                    b.HasOne("MedicalSystem.CoreLayer.Doctor", "Doctor")
                        .WithMany("BranchDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Department", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Doctor", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.CoreLayer.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.DoctorQualification", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.Doctor", "Doctor")
                        .WithMany("DoctorQualifications")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Report", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.Appointment", "Appointment")
                        .WithOne("Report")
                        .HasForeignKey("MedicalSystem.CoreLayer.Report", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Review", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.CoreLayer.Patient", "Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.CoreLayer.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalSystem.CoreLayer.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Appointment", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Branch", b =>
                {
                    b.Navigation("BranchDoctors");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.BranchAddress", b =>
                {
                    b.Navigation("Branch");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BranchDoctors");

                    b.Navigation("DoctorQualifications");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Hospital", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("MedicalSystem.CoreLayer.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
